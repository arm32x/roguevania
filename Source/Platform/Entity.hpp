#pragma once

#include <cstdint>

#include <SFML/Graphics/Sprite.hpp>
#include <SFML/System/Vector2.hpp>
#include <SFML/Window/Event.hpp>

namespace Roguevania {
namespace Platform {
using namespace sf;

class Entity : public Sprite {
        
    public:
        using Sprite::Sprite;
        
        ////////////////////////////////////////////////////////////////////////
        /// Get the velocity of this entity.
        ////////////////////////////////////////////////////////////////////////
        const Vector2f& getVelocity() const;
        
        ////////////////////////////////////////////////////////////////////////
        /// Set the velocity of this entity.
        ////////////////////////////////////////////////////////////////////////
        void setVelocity(const Vector2f& value);
        
        ////////////////////////////////////////////////////////////////////////
        /// Set the velocity of this entity.
        ////////////////////////////////////////////////////////////////////////
        void setVelocity(float x, float y);
        
        ////////////////////////////////////////////////////////////////////////
        /// Change the velocity of this entity.
        ////////////////////////////////////////////////////////////////////////
        void accelerate(const Vector2f& value);
        
        ////////////////////////////////////////////////////////////////////////
        /// Change the velocity of this entity.
        ////////////////////////////////////////////////////////////////////////
        void accelerate(float x, float y);
        
        ////////////////////////////////////////////////////////////////////////
        /// Align this entityâ€™s position to the nearest pixel.
        /// 
        /// @return
        ///     The position before alignment.
        ////////////////////////////////////////////////////////////////////////
        Vector2f alignPosition();
        
        ////////////////////////////////////////////////////////////////////////
        /// Called on every frame to update the entity and do game logic.
        /// 
        /// @param delta
        ///     A multiplier value calculated based on the frames per second.
        ///     1.0 is 60fps, 0.5 is 30fps, and 2.0 is 120fps.
        ////////////////////////////////////////////////////////////////////////
        virtual void update(float delta);
        
        ////////////////////////////////////////////////////////////////////////
        /// Allows entities to handle events taken from the window event loop.
        ////////////////////////////////////////////////////////////////////////
        virtual void event(const Event& e);
        
    protected:
        
        ////////////////////////////////////////////////////////////////////////
        /// The velocity of this entity, measured in pixels per frame.
        ////////////////////////////////////////////////////////////////////////
        Vector2f velocity;
        
        ////////////////////////////////////////////////////////////////////////
        /// Whether or not this entity is currently on the ground.  Used in 
        /// subclasses for various purposes.
        ////////////////////////////////////////////////////////////////////////
        bool onGround = false;
        
        static constexpr float TerminalVelocity = 20.0f;
        
};

};
};