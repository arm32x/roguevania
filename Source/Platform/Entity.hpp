#pragma once

#include <cstdint>

#include <SFML/Graphics/Sprite.hpp>
#include <SFML/System/Vector2.hpp>
#include <SFML/Window/Event.hpp>

namespace RoguelikeMetroidvania {
namespace Platform {
using namespace sf;

class Entity : public Sprite {
        
    public:
        using Sprite::Sprite;
        
        ////////////////////////////////////////////////////////////////////////
        /// Get the velocity of this entity.
        ////////////////////////////////////////////////////////////////////////
        const Vector2f& getVelocity() const;
        
        ////////////////////////////////////////////////////////////////////////
        /// Set the velocity of this entity.
        ////////////////////////////////////////////////////////////////////////
        void setVelocity(const Vector2f& value);
        
        ////////////////////////////////////////////////////////////////////////
        /// Set the velocity of this entity.
        ////////////////////////////////////////////////////////////////////////
        void setVelocity(float x, float y);
        
        ////////////////////////////////////////////////////////////////////////
        /// Change the velocity of this entity.
        ////////////////////////////////////////////////////////////////////////
        void accelerate(const Vector2f& value);
        
        ////////////////////////////////////////////////////////////////////////
        /// Change the velocity of this entity.
        ////////////////////////////////////////////////////////////////////////
        void accelerate(float x, float y);
        
        ////////////////////////////////////////////////////////////////////////
        /// Align this entity’s position to the nearest pixel.
        /// 
        /// @return
        ///     The position before alignment.
        ////////////////////////////////////////////////////////////////////////
        Vector2f alignPosition();
        
        ////////////////////////////////////////////////////////////////////////
        /// Called on every frame to update the entity and do game logic.
        ////////////////////////////////////////////////////////////////////////
        virtual void update();
        
        ////////////////////////////////////////////////////////////////////////
        /// Allows entities to handle events taken from the window event loop.
        ////////////////////////////////////////////////////////////////////////
        virtual void event(const Event& e);
        
    private:
        
        ////////////////////////////////////////////////////////////////////////
        /// The velocity of this entity, measured in pixels per frame.
        ////////////////////////////////////////////////////////////////////////
        Vector2f velocity;
        
        ////////////////////////////////////////////////////////////////////////
        /// Whether or not this entity is currently on the ground.  Used to
        /// check whether this entity can jump or not.
        ////////////////////////////////////////////////////////////////////////
        // TODO:  Abstract this, and jumping functionality, into a “player” class.
        bool onGround = false;
        
};

};
};