#pragma once

#include <cstdint>

#include <SFML/Graphics/View.hpp>
#include <SFML/System/Vector2.hpp>

namespace Roguevania {
namespace Environment {
using namespace sf;

////////////////////////////////////////////////////////////////////////////////
/// A class used to manipulate SFML views.
////////////////////////////////////////////////////////////////////////////////
class Camera {
        
    public:
        ////////////////////////////////////////////////////////////////////////
        /// Creates a camera centered at a given position.
        ////////////////////////////////////////////////////////////////////////
        Camera(float x, float y);
        
        ////////////////////////////////////////////////////////////////////////
        /// Creates a camera centered at a given position.
        ////////////////////////////////////////////////////////////////////////
        Camera(const Vector2f& center);
        
        ////////////////////////////////////////////////////////////////////////
        /// Creates a camera centered at (0, 0).
        ////////////////////////////////////////////////////////////////////////
        Camera();
        
        /// @{ /////////////////////////////////////////////////////////////////
        /// These variables determine when the camera will move towards the
        /// focal point.  They are relative to the viewport, not the world.
        /// 
        /// See http://3.ly/Camera_Logic_in_a_2D_Platformer for more details.
        
        int32_t focusZoneXLeft    = 320 - 32;
        int32_t focusZoneXRight   = 320 + 32;
        
        int32_t focusZoneYTop     = 180 - 8;
        int32_t focusZoneYBottom  = 180 + 8;
        
        int32_t panicZoneYTop     = 180 - 64;
        int32_t panicZoneYBottom  = 180 + 64;
        
        /// @} /////////////////////////////////////////////////////////////////
        
        ////////////////////////////////////////////////////////////////////////
        /// Updates the camera and moves it towards the focal point if it is
        /// outside of the focus zone / panic zone.
        ////////////////////////////////////////////////////////////////////////
        void update(float delta, const Vector2f& focalPoint);
        
        ////////////////////////////////////////////////////////////////////////
        /// Align the cameraâ€™s center to the nearest pixel.
        /// 
        /// @return
        ///     The center before alignment.
        ////////////////////////////////////////////////////////////////////////
        Vector2f alignCenter();
        
        ////////////////////////////////////////////////////////////////////////
        /// The view that this camera controls.
        ////////////////////////////////////////////////////////////////////////
        View view;
        
        ////////////////////////////////////////////////////////////////////////
        /// Gets the focal point that the camera focused on last update.
        ////////////////////////////////////////////////////////////////////////
        const Vector2f& getFocalPoint() const;
        
    private:
        ////////////////////////////////////////////////////////////////////////
        /// The focal point that the camera focused on last update.
        ////////////////////////////////////////////////////////////////////////
        Vector2f previousFocalPoint;
        
};

};
};